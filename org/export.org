#+PROPERTY: header-args :results silent :comments link :mkdirp yes :eval no :tangle ../export.py

#+title: Export Gooreads.com CSV to BibTeX

Goodreads users can export their library from Goodreads.com as a CSV file
[[https://www.goodreads.com/review/import\\][from this page]].

This export tool will read that CSV file to generate BibTeX entries.

* Imports

#+begin_src python
import csv
import re
import sys
#+end_src

* BibTex ID

Generating BibTeX ID can be relatively complex. The goal is to have a unique ID
that persist over time from which someone can understand what documents it
refers to by reading it.

In general, people will use the format: =[last-name][year-of-publication]=. If
it is not unique, they will add the first meaningful word of the title. And
there are tens of variants of course.

With this export script, unique IDs are generated that way:

 1. "lastname" + "yearofpublication", all in lowercase. Just keep letters in the
    name, remove punctuation
 2. if the ID is not unique:
    1. add the first meaningful word (more than 3 letters) by appending it with
       an underscore "_"
    2. if it is still not unique, do this up to the 5 first most meaninful
       words.
    3. if it is still not unique, then put the full title after the hunderscore.

This heuristic previlige small IDs. But in some special case, the ID gets longer
but is still meaningful to the readers.

Here are two extreme examples I got from my personal GoodReads export:

#+begin_src bibtex :tangle no

@book{mallarmé_correspondance,
    title = {Correspondance, 1871-1885 - Tome II},
    author = {Mallarmé, Stéphane},
}

@book{mallarmé_correspondance1862,
    title = {Correspondance, 1862-1871 - Tome I},
    author = {Mallarmé, Stéphane},
}

@book{mallarmé_correspondancejanvier,
    title = {Correspondance, Janvier 1893, Juillet 1894 - Tome VI},
    author = {Mallarmé, Stéphane},
}

@book{mallarmé_correspondancesupplement,
    title = {Correspondance, Supplement errata tomes I à X - tome XI},
    author = {Mallarmé, Stéphane},
}

@book{mallarmé_correspondancenovembre,
    title = {Correspondance, Novembre 1897, Septembre 1898 - Tome X},
    author = {Mallarmé, Stéphane},
}

@book{mallarmé_correspondancejanviernovembre,
    title = {Correspondance, Janvier-Novembre 1897 - Tome IX},
    author = {Mallarmé, Stéphane},
}

@book{mallarmé_correspondance1896,
    title = {Correspondance, 1896 - Tome VIII},
    author = {Mallarmé, Stéphane},
}

@book{mallarmé_correspondancejuillet,
    title = {Correspondance, Juillet 1894, Decembre 1895 - Tome VII},
    author = {Mallarmé, Stéphane},
}

@book{mallarmé_correspondance1892,
    title = {Correspondance, 1892 - Tome V},
    author = {Mallarmé, Stéphane},
}

@book{mallarmé_correspondance1890,
    title = {Correspondance, 1890-1891 - Tome IV},
    author = {Mallarmé, Stéphane},
}

@book{mallarmé_correspondance1886,
    title = {Correspondance, 1886-1889 - Tome III},
    author = {Mallarmé, Stéphane},
}

#+end_src

Or this other series:

#+begin_src bibtex :tangle no

@book{bopp_psychologie,
    title = {Psychologie des Fleurs du Mal - Tome IV - Vol. 1},
    author = {Bopp, Léon},
}

@book{bopp_psychologiefleurs,
    title = {Psychologie des Fleurs du Mal - Tome IV - Vol. 2},
    author = {Bopp, Léon},
}

@book{bopp_psychologiefleurstome,
    title = {Psychologie des Fleurs du Mal - Tome III},
    author = {Bopp, Léon},
}

@book{bopp_psychologiedesfleursdumaltomeii,
    title = {Psychologie des Fleurs du Mal - Tome II},
    author = {Bopp, Léon},
}

@book{bopp_psychologiedesfleursdumaltomei,
    title = {Psychologie des Fleurs du Mal - Tome I},
    author = {Bopp, Léon},
}

#+end_src

#+begin_src python
# Keep an index of all assigned IDs to avoid duplicates
# If an ID is duplicated, add one more meaningful word to the ID
assigned_ids = set()

def clean_title(title):
    """Keep all letters from the titles, and convert everything to spaces. Keep
    one space between words only"""
    title = re.sub(r'\W+', ' ', title)
    title = re.sub(r'\s+', ' ', title)
    return title

def x_meaningful_words(title, x=1):
    """Return the `x` first words with more than three letters. Each word are
    concatenated without spaces in between them."""
    title = clean_title(title)
    words = title.split(' ')
    meaningful_words = []
    for word in words:
        if len(word) > 3:
            meaningful_words.append(word)
            if len(meaningful_words) == x:
                return "".join(meaningful_words)
    return "".join(meaningful_words)

def bibtex_id(author, year, title, x=1):
    """Generates a BibTeX ID"""
    global assigned_ids

    if(x > 5):
        id = author.split(', ')[0].lower() + year + '_' + "".join(clean_title(title).split(' ')).lower()
    else:
        id = author.split(', ')[0].lower() + year + '_' + x_meaningful_words(title, x).lower()
    id = re.sub(r'\W+', '', id)

    if(x > 5):
        assigned_ids.add(id)
        return id

    if(id in assigned_ids):
        return bibtex_id(author, year, title, x+1)
    else:
        assigned_ids.add(id)
        return id
    #+end_src

* Export

In this BibTeX format, I added a few non standard fields such as =date_read=,
=date_added= and =additional_authors=. Those are just to keep track of some key
information that won't be used by the citation tools I will be using.

#+begin_src python
with open(sys.argv[1], newline='') as csvfile:
    reader = csv.reader(csvfile, delimiter=',', quotechar='"')

    # Skip header
    next(reader)

    for row in reader:
        title = row[1]
        author = row[3]
        additional_authors = row[4]
        isbn = row[5]
        publisher = row[9]
        pages = row[11]
        year = row[12]
        date_read = row[14]
        date_added = row[15]

        print("@book{" + bibtex_id(author, year, title) + ",")
        print("    title = {" + title + "},")
        print("    author = {" + author + "},")
        if additional_authors:
            print("    additional_authors = {" + additional_authors + "},")
        if isbn:
            if isbn[2:-1]:
                print("    isbn = {" + isbn[2:-1] + "},")
        if publisher:
            print("    publisher = {" + publisher + "},")
        if pages:
            print("    pages = {" + pages + "},")
        if year:
            print("    year = {" + year + "},")
        if date_read:
            print("    date_read = {" + date_read + "},")
        if date_added:
            print("    date_added = {" + date_added + "},")
        print("}\n")
#+end_src
